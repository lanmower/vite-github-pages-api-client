(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();const l={version:"1.0.0",timeout:1e4,retry_attempts:3,cors_mode:"cors"};class d{constructor(e=""){this.baseUrl=e,this.timeout=l.timeout,this.retryAttempts=l.retry_attempts,this.refreshInterval=null,this.autoRefreshEnabled=!0}setBaseUrl(e){this.baseUrl=e}async makeJSONPRequest(e="",t={},i=1){return new Promise(s=>{try{const n=new URL(this.baseUrl);e&&n.searchParams.set("path",e),t&&typeof t=="object"&&Object.keys(t).forEach(o=>{t[o]!==void 0&&t[o]!==null&&n.searchParams.set(o,t[o])}),console.log("Status Chat API Request:",n.toString());const a="jsonp_callback_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),r=document.createElement("script"),c=setTimeout(()=>{window[a]&&delete window[a],document.head.removeChild(r),s({success:!1,error:"Request timeout",status:0,details:"JSONP request timed out"})},this.timeout);window[a]=function(o){clearTimeout(c),document.head.removeChild(r),delete window[a],s({success:!0,data:o,status:200,method:"JSONP"})},r.onerror=function(){clearTimeout(c),window[a]&&delete window[a],document.head.removeChild(r),s({success:!1,error:"Network error",status:0,details:"Failed to load JSONP script"})},r.src=n.toString()+"&callback="+a,document.head.appendChild(r)}catch(n){s({success:!1,error:n.message,status:0,details:"JSONP request setup failed"})}})}delay(e){return new Promise(t=>setTimeout(t,e))}async getStatuses(){return this.makeJSONPRequest("statuses")}async updateStatus(e,t){return this.makeJSONPRequest("update-status",{name:e,status:t,timestamp:new Date().toISOString()})}async healthCheck(){return this.makeJSONPRequest("health")}}class h{constructor(e){this.apiClient=e,this.elements={},this.initializeElements(),this.bindEvents(),this.loadConfiguration(),this.startApp()}initializeElements(){this.elements.username=document.getElementById("username"),this.elements.userStatus=document.getElementById("user-status"),this.elements.updateStatusBtn=document.getElementById("update-status"),this.elements.statusList=document.getElementById("status-list"),this.elements.refreshBtn=document.getElementById("refresh-btn"),this.elements.lastUpdated=document.getElementById("last-updated"),this.elements.userCount=document.getElementById("user-count"),this.elements.apiUrl=document.getElementById("api-url"),this.elements.saveConfig=document.getElementById("save-config"),this.elements.statusText=document.getElementById("status-text"),this.elements.statusIcon=document.getElementById("status-icon"),this.elements.autoRefreshStatus=document.getElementById("auto-refresh-status")}bindEvents(){this.elements.updateStatusBtn.addEventListener("click",()=>this.updateUserStatus()),this.elements.userStatus.addEventListener("keypress",e=>{e.key==="Enter"&&this.updateUserStatus()}),this.elements.refreshBtn.addEventListener("click",()=>this.refreshStatuses()),this.elements.saveConfig.addEventListener("click",()=>this.saveConfiguration()),this.elements.apiUrl.addEventListener("change",()=>this.saveConfiguration()),this.elements.username.addEventListener("change",()=>this.saveUserData()),this.elements.userStatus.addEventListener("change",()=>this.saveUserData())}async startApp(){this.updateConnectionStatus("connecting","Connecting to chat server..."),(await this.apiClient.healthCheck()).success?(this.updateConnectionStatus("connected","Connected to chat server"),this.loadUserData(),this.startAutoRefresh(),this.refreshStatuses()):(this.updateConnectionStatus("error","Failed to connect to chat server"),this.showEmptyState("Cannot connect to chat server. Check configuration."))}async updateUserStatus(){const e=this.elements.username.value.trim(),t=this.elements.userStatus.value.trim();if(!e||!t){alert("Please enter both your name and status message.");return}this.setButtonLoading(this.elements.updateStatusBtn,!0);const i=await this.apiClient.updateStatus(e,t);i.success?(this.saveUserData(),this.refreshStatuses(),this.elements.userStatus.value="",this.elements.userStatus.focus()):alert("Failed to update status: "+i.error),this.setButtonLoading(this.elements.updateStatusBtn,!1)}async refreshStatuses(){this.setButtonLoading(this.elements.refreshBtn,!0);const e=await this.apiClient.getStatuses();e.success?(this.displayStatuses(e.data),this.updateLastRefreshed()):(console.error("Failed to refresh statuses:",e.error),this.showEmptyState("Failed to load statuses. "+e.error)),this.setButtonLoading(this.elements.refreshBtn,!1)}displayStatuses(e){const t=e.statuses||[];if(t.length===0){this.showEmptyState("No status updates yet. Be the first to share what you're up to!");return}const i=t.map(s=>{const n=this.getTimeAgo(s.timestamp);return`
        <div class="status-item">
          <div class="status-user">
            <div class="status-name">${this.escapeHtml(s.name)}</div>
            <div class="status-message">${this.escapeHtml(s.status)}</div>
          </div>
          <div class="status-time">${n}</div>
        </div>
      `}).join("");this.elements.statusList.innerHTML=i,this.elements.userCount.textContent=`${t.length} users online`}showEmptyState(e){this.elements.statusList.innerHTML=`
      <div class="empty-message">
        <h3>üí≠ ${e}</h3>
        <p>Status updates will appear here in real-time.</p>
      </div>
    `,this.elements.userCount.textContent="0 users online"}startAutoRefresh(){this.refreshInterval&&clearInterval(this.refreshInterval),this.refreshInterval=setInterval(()=>{this.autoRefreshEnabled&&this.refreshStatuses()},1e4)}updateLastRefreshed(){const e=new Date;this.elements.lastUpdated.textContent=`Last updated: ${e.toLocaleTimeString()}`}updateConnectionStatus(e,t){this.elements.statusText.textContent=t;const i={connecting:"‚è≥",connected:"‚úÖ",error:"‚ùå"};this.elements.statusIcon.textContent=i[e]||"‚ö™"}saveConfiguration(){const e=this.elements.apiUrl.value.trim();if(!e){alert("Please enter a valid Google Apps Script URL");return}try{new URL(e),this.apiClient.setBaseUrl(e),localStorage.setItem("chat-api-url",e),console.log("Chat API URL configured:",e)}catch{alert("Invalid URL format")}}loadConfiguration(){const e=localStorage.getItem("chat-api-url");e&&(this.elements.apiUrl.value=e,this.apiClient.setBaseUrl(e))}saveUserData(){localStorage.setItem("chat-username",this.elements.username.value)}loadUserData(){const e=localStorage.getItem("chat-username");e&&(this.elements.username.value=e)}setButtonLoading(e,t){t?(e.disabled=!0,e.dataset.originalText=e.textContent,e.textContent="Loading..."):(e.disabled=!1,e.textContent=e.dataset.originalText||e.textContent)}getTimeAgo(e){try{const t=new Date(e),s=new Date-t,n=Math.floor(s/6e4);if(n<1)return"just now";if(n<60)return`${n}m ago`;const a=Math.floor(n/60);return a<24?`${a}h ago`:`${Math.floor(a/24)}d ago`}catch{return"unknown"}}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}}document.addEventListener("DOMContentLoaded",()=>{console.log("üöÄ Status Chat - Starting..."),console.log("API Version:",l.version);const u="https://script.google.com/macros/s/AKfycbykbaXGYsA1INdEZUlSy02wJsGwsTdKTtFMoeB8H7c7JPzn81HKs-cu2x8DR_IOtusv-g/exec",e=new d(u);new h(e),window.addEventListener("unhandledrejection",t=>{console.error("Unhandled promise rejection:",t.reason)}),console.log("‚úÖ Status Chat initialized successfully")});window.API_CONFIG=l;
//# sourceMappingURL=index-Cv_wRDjw.js.map
