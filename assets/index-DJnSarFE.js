(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function e(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(s){if(s.ep)return;s.ep=!0;const a=e(s);fetch(s.href,a)}})();const c={version:"1.0.0",timeout:1e4,retry_attempts:3,cors_mode:"cors"};class d{constructor(t=""){this.baseUrl=t,this.timeout=c.timeout,this.retryAttempts=c.retry_attempts,this.refreshInterval=null,this.autoRefreshEnabled=!0}setBaseUrl(t){this.baseUrl=t}async makeJSONPRequest(t="",e={},r=1){return new Promise(s=>{try{const a=new URL(this.baseUrl);t&&a.searchParams.set("path",t),e&&typeof e=="object"&&Object.keys(e).forEach(o=>{e[o]!==void 0&&e[o]!==null&&a.searchParams.set(o,e[o])}),console.log("Status Chat API Request:",a.toString());const n="jsonp_callback_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),i=document.createElement("script"),l=setTimeout(()=>{window[n]&&delete window[n],document.head.removeChild(i),s({success:!1,error:"Request timeout",status:0,details:"JSONP request timed out"})},this.timeout);window[n]=function(o){clearTimeout(l),document.head.removeChild(i),delete window[n],s({success:!0,data:o,status:200,method:"JSONP"})},i.onerror=function(){clearTimeout(l),window[n]&&delete window[n],document.head.removeChild(i),s({success:!1,error:"Network error",status:0,details:"Failed to load JSONP script"})},i.src=a.toString()+"&callback="+n,document.head.appendChild(i)}catch(a){s({success:!1,error:a.message,status:0,details:"JSONP request setup failed"})}})}delay(t){return new Promise(e=>setTimeout(e,t))}async getStatuses(){const t=await this.makeJSONPRequest("statuses");if(console.log("getStatuses result:",t),t.data&&t.data.message&&t.data.message.includes("WFGY"))return console.log("Using fallback mock data for statuses"),{success:!0,data:{statuses:[{name:"Demo User",status:"Testing the status chat system",timestamp:new Date().toISOString()}]}};if(!t.data||!t.data.statuses){console.log("No statuses array in response, using fallback");const e=JSON.parse(localStorage.getItem("demo-statuses")||"[]");return{success:!0,data:{statuses:e.length>0?e:[{name:"Demo User",status:"Testing the status chat system",timestamp:new Date().toISOString()}]}}}return t}async updateStatus(t,e){const r=await this.makeJSONPRequest("update-status",{name:t,status:e,timestamp:new Date().toISOString()});if(console.log("updateStatus result:",r),r.data&&r.data.message&&r.data.message.includes("WFGY")){console.log("Using fallback for status update, saving to localStorage");const s=JSON.parse(localStorage.getItem("demo-statuses")||"[]"),a={name:t,status:e,timestamp:new Date().toISOString()},n=s.filter(i=>i.name!==t);return n.push(a),n.sort((i,l)=>new Date(l.timestamp)-new Date(i.timestamp)),localStorage.setItem("demo-statuses",JSON.stringify(n)),{success:!0,message:"Status updated successfully (demo mode)",user:t,status:e,timestamp:new Date().toISOString()}}return r}async healthCheck(){return this.makeJSONPRequest("health")}}class h{constructor(t){this.apiClient=t,this.elements={},this.initializeElements(),this.bindEvents(),this.loadConfiguration(),this.startApp()}initializeElements(){this.elements.username=document.getElementById("username"),this.elements.userStatus=document.getElementById("user-status"),this.elements.updateStatusBtn=document.getElementById("update-status"),this.elements.statusList=document.getElementById("status-list"),this.elements.refreshBtn=document.getElementById("refresh-btn"),this.elements.lastUpdated=document.getElementById("last-updated"),this.elements.userCount=document.getElementById("user-count"),this.elements.apiUrl=document.getElementById("api-url"),this.elements.saveConfig=document.getElementById("save-config"),this.elements.statusText=document.getElementById("status-text"),this.elements.statusIcon=document.getElementById("status-icon"),this.elements.autoRefreshStatus=document.getElementById("auto-refresh-status")}bindEvents(){this.elements.updateStatusBtn.addEventListener("click",()=>this.updateUserStatus()),this.elements.userStatus.addEventListener("keypress",t=>{t.key==="Enter"&&this.updateUserStatus()}),this.elements.refreshBtn.addEventListener("click",()=>this.refreshStatuses()),this.elements.saveConfig.addEventListener("click",()=>this.saveConfiguration()),this.elements.apiUrl.addEventListener("change",()=>this.saveConfiguration()),this.elements.username.addEventListener("change",()=>this.saveUserData()),this.elements.userStatus.addEventListener("change",()=>this.saveUserData())}async startApp(){this.updateConnectionStatus("connecting","Connecting to chat server..."),(await this.apiClient.healthCheck()).success?(this.updateConnectionStatus("connected","Connected to chat server"),this.loadUserData(),this.startAutoRefresh(),this.refreshStatuses()):(this.updateConnectionStatus("error","Failed to connect to chat server"),this.showEmptyState("Cannot connect to chat server. Check configuration."))}async updateUserStatus(){const t=this.elements.username.value.trim(),e=this.elements.userStatus.value.trim();if(!t||!e){alert("Please enter both your name and status message.");return}this.setButtonLoading(this.elements.updateStatusBtn,!0);const r=await this.apiClient.updateStatus(t,e);r.success?(this.saveUserData(),this.refreshStatuses(),this.elements.userStatus.value="",this.elements.userStatus.focus()):alert("Failed to update status: "+r.error),this.setButtonLoading(this.elements.updateStatusBtn,!1)}async refreshStatuses(){this.setButtonLoading(this.elements.refreshBtn,!0);const t=await this.apiClient.getStatuses();t.success?(this.displayStatuses(t.data),this.updateLastRefreshed()):(console.error("Failed to refresh statuses:",t.error),this.showEmptyState("Failed to load statuses. "+t.error)),this.setButtonLoading(this.elements.refreshBtn,!1)}displayStatuses(t){const e=t.statuses||[];if(e.length===0){this.showEmptyState("No status updates yet. Be the first to share what you're up to!");return}const r=e.map(s=>{const a=this.getTimeAgo(s.timestamp);return`
        <div class="status-item">
          <div class="status-user">
            <div class="status-name">${this.escapeHtml(s.name)}</div>
            <div class="status-message">${this.escapeHtml(s.status)}</div>
          </div>
          <div class="status-time">${a}</div>
        </div>
      `}).join("");this.elements.statusList.innerHTML=r,this.elements.userCount.textContent=`${e.length} users online`}showEmptyState(t){this.elements.statusList.innerHTML=`
      <div class="empty-message">
        <h3>üí≠ ${t}</h3>
        <p>Status updates will appear here in real-time.</p>
      </div>
    `,this.elements.userCount.textContent="0 users online"}startAutoRefresh(){this.refreshInterval&&clearInterval(this.refreshInterval),this.refreshInterval=setInterval(()=>{this.autoRefreshEnabled&&this.refreshStatuses()},1e4)}updateLastRefreshed(){const t=new Date;this.elements.lastUpdated.textContent=`Last updated: ${t.toLocaleTimeString()}`}updateConnectionStatus(t,e){this.elements.statusText.textContent=e;const r={connecting:"‚è≥",connected:"‚úÖ",error:"‚ùå"};this.elements.statusIcon.textContent=r[t]||"‚ö™"}saveConfiguration(){const t=this.elements.apiUrl.value.trim();if(!t){alert("Please enter a valid Google Apps Script URL");return}try{new URL(t),this.apiClient.setBaseUrl(t),localStorage.setItem("chat-api-url",t),console.log("Chat API URL configured:",t)}catch{alert("Invalid URL format")}}loadConfiguration(){const t=localStorage.getItem("chat-api-url");t&&(this.elements.apiUrl.value=t,this.apiClient.setBaseUrl(t))}saveUserData(){localStorage.setItem("chat-username",this.elements.username.value)}loadUserData(){const t=localStorage.getItem("chat-username");t&&(this.elements.username.value=t)}setButtonLoading(t,e){e?(t.disabled=!0,t.dataset.originalText=t.textContent,t.textContent="Loading..."):(t.disabled=!1,t.textContent=t.dataset.originalText||t.textContent)}getTimeAgo(t){try{const e=new Date(t),s=new Date-e,a=Math.floor(s/6e4);if(a<1)return"just now";if(a<60)return`${a}m ago`;const n=Math.floor(a/60);return n<24?`${n}h ago`:`${Math.floor(n/24)}d ago`}catch{return"unknown"}}escapeHtml(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}}document.addEventListener("DOMContentLoaded",()=>{console.log("üöÄ Status Chat - Starting..."),console.log("API Version:",c.version);const u="https://script.google.com/macros/s/AKfycbwXWylNtOGrkprV5Jv_gTeVpgMkj0TgcHc29j-f-rKPxp7QeJRc_EroGF4MBCXdFpLqTw/exec",t=new d(u);new h(t),window.addEventListener("unhandledrejection",e=>{console.error("Unhandled promise rejection:",e.reason)}),console.log("‚úÖ Status Chat initialized successfully")});window.API_CONFIG=c;
//# sourceMappingURL=index-DJnSarFE.js.map
