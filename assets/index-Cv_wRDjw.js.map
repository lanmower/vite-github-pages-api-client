{"version":3,"file":"index-Cv_wRDjw.js","sources":["../../src/main.js"],"sourcesContent":["// Live Status Chat - WFGY v2.0 Framework Integration\nimport './style.css'\n\n// API Configuration\nconst API_CONFIG = {\n  version: \"1.0.0\",\n  timeout: 10000,\n  retry_attempts: 3,\n  cors_mode: 'cors'\n};\n\n// Status Chat Client Class with CORS Proxy\nclass StatusChatClient {\n  constructor(baseUrl = '') {\n    this.baseUrl = baseUrl;\n    this.timeout = API_CONFIG.timeout;\n    this.retryAttempts = API_CONFIG.retry_attempts;\n    this.refreshInterval = null;\n    this.autoRefreshEnabled = true;\n  }\n\n  setBaseUrl(url) {\n    this.baseUrl = url;\n  }\n\n  async makeJSONPRequest(path = '', params = {}, attempt = 1) {\n    return new Promise((resolve) => {\n      try {\n        // Build target URL with parameters\n        const targetUrl = new URL(this.baseUrl);\n        if (path) targetUrl.searchParams.set('path', path);\n        if (params && typeof params === 'object') {\n          Object.keys(params).forEach(key => {\n            if (params[key] !== undefined && params[key] !== null) {\n              targetUrl.searchParams.set(key, params[key]);\n            }\n          });\n        }\n\n        console.log('Status Chat API Request:', targetUrl.toString());\n\n        const callbackName = 'jsonp_callback_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        const script = document.createElement('script');\n\n        // Set timeout\n        const timeoutId = setTimeout(() => {\n          if (window[callbackName]) {\n            delete window[callbackName];\n          }\n          document.head.removeChild(script);\n          resolve({\n            success: false,\n            error: 'Request timeout',\n            status: 0,\n            details: 'JSONP request timed out'\n          });\n        }, this.timeout);\n\n        window[callbackName] = function(data) {\n          clearTimeout(timeoutId);\n          document.head.removeChild(script);\n          delete window[callbackName];\n\n          resolve({\n            success: true,\n            data: data,\n            status: 200,\n            method: 'JSONP'\n          });\n        };\n\n        script.onerror = function() {\n          clearTimeout(timeoutId);\n          if (window[callbackName]) {\n            delete window[callbackName];\n          }\n          document.head.removeChild(script);\n          resolve({\n            success: false,\n            error: 'Network error',\n            status: 0,\n            details: 'Failed to load JSONP script'\n          });\n        };\n\n        script.src = targetUrl.toString() + '&callback=' + callbackName;\n        document.head.appendChild(script);\n\n      } catch (error) {\n        resolve({\n          success: false,\n          error: error.message,\n          status: 0,\n          details: 'JSONP request setup failed'\n        });\n      }\n    });\n  }\n\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // API method implementations for status chat\n  async getStatuses() {\n    return this.makeJSONPRequest('statuses');\n  }\n\n  async updateStatus(name, status) {\n    return this.makeJSONPRequest('update-status', {\n      name: name,\n      status: status,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  async healthCheck() {\n    return this.makeJSONPRequest('health');\n  }\n}\n\n// Status Chat UI Controller\nclass StatusChatUI {\n  constructor(apiClient) {\n    this.apiClient = apiClient;\n    this.elements = {};\n    this.initializeElements();\n    this.bindEvents();\n    this.loadConfiguration();\n    this.startApp();\n  }\n\n  initializeElements() {\n    // User input elements\n    this.elements.username = document.getElementById('username');\n    this.elements.userStatus = document.getElementById('user-status');\n    this.elements.updateStatusBtn = document.getElementById('update-status');\n\n    // Status feed elements\n    this.elements.statusList = document.getElementById('status-list');\n    this.elements.refreshBtn = document.getElementById('refresh-btn');\n    this.elements.lastUpdated = document.getElementById('last-updated');\n    this.elements.userCount = document.getElementById('user-count');\n\n    // Configuration elements\n    this.elements.apiUrl = document.getElementById('api-url');\n    this.elements.saveConfig = document.getElementById('save-config');\n\n    // Status elements\n    this.elements.statusText = document.getElementById('status-text');\n    this.elements.statusIcon = document.getElementById('status-icon');\n    this.elements.autoRefreshStatus = document.getElementById('auto-refresh-status');\n  }\n\n  bindEvents() {\n    // User input events\n    this.elements.updateStatusBtn.addEventListener('click', () => this.updateUserStatus());\n    this.elements.userStatus.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') this.updateUserStatus();\n    });\n\n    // Refresh events\n    this.elements.refreshBtn.addEventListener('click', () => this.refreshStatuses());\n\n    // Configuration events\n    this.elements.saveConfig.addEventListener('click', () => this.saveConfiguration());\n    this.elements.apiUrl.addEventListener('change', () => this.saveConfiguration());\n\n    // Auto-save username and status\n    this.elements.username.addEventListener('change', () => this.saveUserData());\n    this.elements.userStatus.addEventListener('change', () => this.saveUserData());\n  }\n\n  async startApp() {\n    this.updateConnectionStatus('connecting', 'Connecting to chat server...');\n\n    // Check API health\n    const healthResult = await this.apiClient.healthCheck();\n\n    if (healthResult.success) {\n      this.updateConnectionStatus('connected', 'Connected to chat server');\n      this.loadUserData();\n      this.startAutoRefresh();\n      this.refreshStatuses();\n    } else {\n      this.updateConnectionStatus('error', 'Failed to connect to chat server');\n      this.showEmptyState('Cannot connect to chat server. Check configuration.');\n    }\n  }\n\n  async updateUserStatus() {\n    const name = this.elements.username.value.trim();\n    const status = this.elements.userStatus.value.trim();\n\n    if (!name || !status) {\n      alert('Please enter both your name and status message.');\n      return;\n    }\n\n    this.setButtonLoading(this.elements.updateStatusBtn, true);\n\n    const result = await this.apiClient.updateStatus(name, status);\n\n    if (result.success) {\n      this.saveUserData();\n      this.refreshStatuses();\n      // Clear status input for next update\n      this.elements.userStatus.value = '';\n      this.elements.userStatus.focus();\n    } else {\n      alert('Failed to update status: ' + result.error);\n    }\n\n    this.setButtonLoading(this.elements.updateStatusBtn, false);\n  }\n\n  async refreshStatuses() {\n    this.setButtonLoading(this.elements.refreshBtn, true);\n\n    const result = await this.apiClient.getStatuses();\n\n    if (result.success) {\n      this.displayStatuses(result.data);\n      this.updateLastRefreshed();\n    } else {\n      console.error('Failed to refresh statuses:', result.error);\n      this.showEmptyState('Failed to load statuses. ' + result.error);\n    }\n\n    this.setButtonLoading(this.elements.refreshBtn, false);\n  }\n\n  displayStatuses(data) {\n    const statuses = data.statuses || [];\n\n    if (statuses.length === 0) {\n      this.showEmptyState('No status updates yet. Be the first to share what you\\'re up to!');\n      return;\n    }\n\n    const statusesHTML = statuses.map(status => {\n      const timeAgo = this.getTimeAgo(status.timestamp);\n      return `\n        <div class=\"status-item\">\n          <div class=\"status-user\">\n            <div class=\"status-name\">${this.escapeHtml(status.name)}</div>\n            <div class=\"status-message\">${this.escapeHtml(status.status)}</div>\n          </div>\n          <div class=\"status-time\">${timeAgo}</div>\n        </div>\n      `;\n    }).join('');\n\n    this.elements.statusList.innerHTML = statusesHTML;\n    this.elements.userCount.textContent = `${statuses.length} users online`;\n  }\n\n  showEmptyState(message) {\n    this.elements.statusList.innerHTML = `\n      <div class=\"empty-message\">\n        <h3>üí≠ ${message}</h3>\n        <p>Status updates will appear here in real-time.</p>\n      </div>\n    `;\n    this.elements.userCount.textContent = '0 users online';\n  }\n\n  startAutoRefresh() {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n\n    // Refresh every 10 seconds\n    this.refreshInterval = setInterval(() => {\n      if (this.autoRefreshEnabled) {\n        this.refreshStatuses();\n      }\n    }, 10000);\n  }\n\n  updateLastRefreshed() {\n    const now = new Date();\n    this.elements.lastUpdated.textContent = `Last updated: ${now.toLocaleTimeString()}`;\n  }\n\n  updateConnectionStatus(type, message) {\n    this.elements.statusText.textContent = message;\n\n    const icons = {\n      connecting: '‚è≥',\n      connected: '‚úÖ',\n      error: '‚ùå'\n    };\n\n    this.elements.statusIcon.textContent = icons[type] || '‚ö™';\n  }\n\n  saveConfiguration() {\n    const url = this.elements.apiUrl.value.trim();\n    if (!url) {\n      alert('Please enter a valid Google Apps Script URL');\n      return;\n    }\n\n    try {\n      new URL(url); // Validate URL format\n      this.apiClient.setBaseUrl(url);\n      localStorage.setItem('chat-api-url', url);\n      console.log('Chat API URL configured:', url);\n    } catch (error) {\n      alert('Invalid URL format');\n    }\n  }\n\n  loadConfiguration() {\n    const savedUrl = localStorage.getItem('chat-api-url');\n    if (savedUrl) {\n      this.elements.apiUrl.value = savedUrl;\n      this.apiClient.setBaseUrl(savedUrl);\n    }\n  }\n\n  saveUserData() {\n    localStorage.setItem('chat-username', this.elements.username.value);\n  }\n\n  loadUserData() {\n    const savedUsername = localStorage.getItem('chat-username');\n    if (savedUsername) {\n      this.elements.username.value = savedUsername;\n    }\n  }\n\n  setButtonLoading(button, isLoading) {\n    if (isLoading) {\n      button.disabled = true;\n      button.dataset.originalText = button.textContent;\n      button.textContent = 'Loading...';\n    } else {\n      button.disabled = false;\n      button.textContent = button.dataset.originalText || button.textContent;\n    }\n  }\n\n  getTimeAgo(timestamp) {\n    try {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffMs = now - date;\n      const diffMins = Math.floor(diffMs / 60000);\n\n      if (diffMins < 1) return 'just now';\n      if (diffMins < 60) return `${diffMins}m ago`;\n\n      const diffHours = Math.floor(diffMins / 60);\n      if (diffHours < 24) return `${diffHours}h ago`;\n\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays}d ago`;\n    } catch (error) {\n      return 'unknown';\n    }\n  }\n\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n}\n\n// Application initialization\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('üöÄ Status Chat - Starting...');\n  console.log('API Version:', API_CONFIG.version);\n\n  // Initialize API client and UI\n  const defaultApiUrl = 'https://script.google.com/macros/s/AKfycbykbaXGYsA1INdEZUlSy02wJsGwsTdKTtFMoeB8H7c7JPzn81HKs-cu2x8DR_IOtusv-g/exec';\n  const apiClient = new StatusChatClient(defaultApiUrl);\n  const chatUI = new StatusChatUI(apiClient);\n\n  // Global error handling\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n  });\n\n  console.log('‚úÖ Status Chat initialized successfully');\n});\n\n// Export for debugging\nwindow.API_CONFIG = API_CONFIG;"],"names":["API_CONFIG","StatusChatClient","baseUrl","url","path","params","attempt","resolve","targetUrl","key","callbackName","script","timeoutId","data","error","ms","name","status","StatusChatUI","apiClient","result","statuses","statusesHTML","timeAgo","message","now","type","icons","savedUrl","savedUsername","button","isLoading","timestamp","date","diffMs","diffMins","diffHours","text","div","defaultApiUrl","event"],"mappings":"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"}